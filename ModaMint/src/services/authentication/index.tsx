import axios from "axios"
import { CLOUDINARY_CONFIG, getCloudinaryUploadUrl } from '../../config/cloudinary';

export interface AuthenticationRequest {
    username: string,
    password: string,
}


export interface AuthenticationResponse {
    accessToken: string,
    refreshToken: string,
    tokenType: string,
    expiresIn: number,
}


export interface UserResponse {
    id: string,
    username: string,
    email: string,
    firstName: string,
    lastName: string,
    phone: string,
    dob: string,
    image?: string, 
    createdDate?: string,
    lastModifiedDate?: string,
}

// Interface cho ChangePasswordRequest
export interface ChangePasswordRequest {
    currentPassword: string,
    newPassword: string,
    confirmPassword: string,
}

// Interface ƒë·ªãnh nghƒ©a c·∫•u tr√∫c chung c·ªßa t·∫•t c·∫£ API response t·ª´ server
export interface ApiResponse<T> {
    code: number,    // M√£ tr·∫°ng th√°i (VD: 1000 = success, 1001 = error...)
    message: string, // Th√¥ng b√°o t·ª´ server
    result: T,       // D·ªØ li·ªáu th·ª±c t·∫ø (c√≥ th·ªÉ l√† b·∫•t k·ª≥ ki·ªÉu n√†o - generic T)
}

// T·∫°o m·ªôt axios instance v·ªõi config m·∫∑c ƒë·ªãnh
const apiClient = axios.create({
    // URL g·ªëc c·ªßa API server, l·∫•y t·ª´ env ho·∫∑c d√πng localhost
    baseURL: import.meta.env.VITE_API_URL,
    headers: {
        // B√°o cho server bi·∫øt ch√∫ng ta g·ª≠i d·ªØ li·ªáu d·∫°ng JSON
        'Content-Type': 'application/json',
    }
})

// Debug: Log baseURL ƒë·ªÉ ki·ªÉm tra
console.log('üåê API Base URL:', apiClient.defaults.baseURL);

// Bi·∫øn ƒë·ªÉ theo d√µi vi·ªác refresh token ƒëang di·ªÖn ra
let isRefreshing = false;
let failedQueue: Array<{
    resolve: (value: any) => void;
    reject: (reason: any) => void;
}> = [];

const processQueue = (error: any, token: string | null = null) => {
    failedQueue.forEach(({ resolve, reject }) => {
        if (error) {
            reject(error);
        } else {
            resolve(token);
        }
    });

    failedQueue = [];
};

// Interceptor: can thi·ªáp v√†o m·ªói request tr∆∞·ªõc khi g·ª≠i ƒëi
apiClient.interceptors.request.use(
    (config) => {
        // KH√îNG th√™m token v√†o request login, logout, refresh
        const isAuthRequest = config.url?.includes('/auth/login') || 
                             config.url?.includes('/auth/logout') || 
                             config.url?.includes('/auth/refresh');
        
        if (isAuthRequest) {
            console.log('üîì Auth request - skipping token addition');
            return config;
        }
        
        // L·∫•y token t·ª´ authData cho c√°c request kh√°c
        const authDataStr = localStorage.getItem("authData");
        
        if (authDataStr) {
            try {
                const authData = JSON.parse(authDataStr);
                if (authData && authData.accessToken) {
                    // Th√™m token v√†o header Authorization ƒë·ªÉ server bi·∫øt user ƒë√£ ƒëƒÉng nh·∫≠p
                    config.headers.Authorization = `Bearer ${authData.accessToken}`;
                    console.log('üîë Token added to header');
                } else {
                    console.log('‚ö†Ô∏è No accessToken found in authData');
                }
            } catch (error) {
                console.error('Error parsing authData:', error);
            }
        } else {
            console.log('‚ö†Ô∏è No authData found in localStorage');
        }
        return config; // Tr·∫£ v·ªÅ config ƒë√£ ƒë∆∞·ª£c modify
    },
    (error) => {
        // N·∫øu c√≥ l·ªói trong qu√° tr√¨nh chu·∫©n b·ªã request
        return Promise.reject(error);
    }
)

// Interceptor: can thi·ªáp v√†o response ƒë·ªÉ x·ª≠ l√Ω refresh token
apiClient.interceptors.response.use(
    (response) => {
        return response;
    },
    async (error) => {
        const originalRequest = error.config;

        // N·∫øu l·ªói 401 (Unauthorized) v√† ch∆∞a th·ª≠ refresh
        if (error.response?.status === 401 && !originalRequest._retry) {
            if (isRefreshing) {
                // N·∫øu ƒëang refresh, th√™m request v√†o queue
                return new Promise((resolve, reject) => {
                    failedQueue.push({ resolve, reject });
                }).then(token => {
                    originalRequest.headers.Authorization = `Bearer ${token}`;
                    return apiClient(originalRequest);
                }).catch(err => {
                    return Promise.reject(err);
                });
            }

            originalRequest._retry = true;
            isRefreshing = true;

            const authDataStr = localStorage.getItem("authData");
            if (!authDataStr) {
                processQueue(error, null);
                isRefreshing = false;
                return Promise.reject(error);
            }

            try {
                const authData = JSON.parse(authDataStr);
                if (!authData.refreshToken) {
                    processQueue(error, null);
                    isRefreshing = false;
                    return Promise.reject(error);
                }

                // G·ªçi API refresh token
                const refreshResult = await authenticationService.refreshAccessToken(authData.refreshToken);

                if (refreshResult.success && refreshResult.data) {
                    // C·∫≠p nh·∫≠t token m·ªõi
                    const newAuthData = {
                        ...authData,
                        accessToken: refreshResult.data.accessToken,
                        refreshToken: refreshResult.data.refreshToken || authData.refreshToken
                    };
                    localStorage.setItem("authData", JSON.stringify(newAuthData));

                    // X·ª≠ l√Ω c√°c request trong queue
                    processQueue(null, refreshResult.data.accessToken);

                    // Th·ª≠ l·∫°i request ban ƒë·∫ßu v·ªõi token m·ªõi
                    originalRequest.headers.Authorization = `Bearer ${refreshResult.data.accessToken}`;
                    isRefreshing = false;
                    return apiClient(originalRequest);
                } else {
                    // Refresh token th·∫•t b·∫°i, ƒëƒÉng xu·∫•t user
                    processQueue(error, null);
                    isRefreshing = false;
                    localStorage.removeItem("authData");
                    window.location.href = "/login";
                    return Promise.reject(error);
                }
            } catch (refreshError) {
                processQueue(refreshError, null);
                isRefreshing = false;
                localStorage.removeItem("authData");
                window.location.href = "/login";
                return Promise.reject(refreshError);
            }
        }

        return Promise.reject(error);
    }
)

// Class ch·ª©a c√°c method x·ª≠ l√Ω authentication
class AuthenticationService {
    // Method ƒëƒÉng nh·∫≠p
    async authenticate(credentials: AuthenticationRequest): Promise<{ success: boolean; data?: AuthenticationResponse; message?: string }> {
        try {
            console.log('üîê Attempting login with credentials:', { username: credentials.username });
            console.log('üåê Request URL:', apiClient.defaults.baseURL + '/auth/login');
            console.log('üì§ Request body:', credentials);
            console.log('üìã Request headers:', apiClient.defaults.headers);
            
            const response = await apiClient.post<ApiResponse<AuthenticationResponse>>(
                '/auth/login',
                credentials
            );
            console.log('üì• Login response:', response.data);
            const apiResponse = response.data;
            
            // Ki·ªÉm tra n·∫øu response c√≥ format ApiResponse<T>
            if (apiResponse.code !== undefined) {
                if (apiResponse.code !== 1000) {
                    console.log('‚ùå Login failed with code:', apiResponse.code, 'message:', apiResponse.message);
                    return {
                        success: false,
                        message: apiResponse.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
                    };
                }
                console.log('‚úÖ Login successful (ApiResponse format)');
                return {
                    success: true,
                    data: apiResponse.result, // Tr·∫£ v·ªÅ AuthenticationResponse
                };
            }
            
            // N·∫øu response kh√¥ng c√≥ format ApiResponse, c√≥ th·ªÉ l√† direct data
            if ((apiResponse as any).accessToken) {
                console.log('‚úÖ Login successful (Direct format)');
                return {
                    success: true,
                    data: apiResponse as unknown as AuthenticationResponse,
                };
            }
            
            // N·∫øu kh√¥ng match format n√†o
            console.log('‚ùå Unknown response format:', apiResponse);
            return {
                success: false,
                message: 'ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá',
            };
        } catch (error) {
            console.error('üö® Login error:', error);
            // X·ª≠ l√Ω l·ªói n·∫øu request failed
            if (axios.isAxiosError(error)) {
                console.log('üìä Error response:', error.response?.data);
                console.log('üìä Error status:', error.response?.status);
                console.log('üìä Error headers:', error.response?.headers);
                console.log('üìä Full error:', error);
                console.log('üìä Request config:', error.config);
                // N·∫øu l√† l·ªói t·ª´ axios (VD: 400, 401, 500...)
                const errorResponse = error.response?.data as ApiResponse<any>;
                return {
                    success: false,
                    message: errorResponse?.message || `ƒêƒÉng nh·∫≠p th·∫•t b·∫°i (${error.response?.status})`,
                };
            }
            // L·ªói kh√°c (VD: kh√¥ng c√≥ internet)
            return {
                success: false,
                message: 'L·ªói k·∫øt n·ªëi ƒë·∫øn server',
            };
        }
    }

    // Method upload h√¨nh ·∫£nh l√™n Cloudinary
    async uploadImage(file: File): Promise<{ success: boolean; imageUrl?: string; message?: string }> {
        try {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);
            formData.append('folder', CLOUDINARY_CONFIG.folder);
            
            // Th√™m timestamp ƒë·ªÉ tr√°nh cache
            formData.append('timestamp', Date.now().toString());

            const response = await fetch(getCloudinaryUploadUrl(), {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Cloudinary upload error:', errorData);
                throw new Error(`Upload failed: ${errorData.error?.message || 'Unknown error'}`);
            }

            const data = await response.json();
            return {
                success: true,
                imageUrl: data.secure_url
            };
        } catch (error) {
            console.error('Upload error:', error);
            return {
                success: false,
                message: error instanceof Error ? error.message : 'L·ªói khi upload h√¨nh ·∫£nh'
            };
        }
    }

    // Method c·∫≠p nh·∫≠t th√¥ng tin user bao g·ªìm h√¨nh ·∫£nh
    async updateUserProfile(userData: Partial<UserResponse>): Promise<{ success: boolean; data?: UserResponse; message?: string }> {
        try {
            const response = await apiClient.put<ApiResponse<UserResponse>>('/auth/profile', userData);
            const apiResponse = response.data;

            if (apiResponse.code !== 1000) {
                return {
                    success: false,
                    message: apiResponse.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin',
                };
            }

            return {
                success: true,
                data: apiResponse.result,
            };
        } catch (error) {
            if (axios.isAxiosError(error)) {
                const errorResponse = error.response?.data as ApiResponse<any>;
                return {
                    success: false,
                    message: errorResponse?.message || 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin',
                };
            }
            return {
                success: false,
                message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
            };
        }
    }

    // Method l·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ server
    async getCurrentUser(): Promise<{ success: boolean; data?: UserResponse; message?: string }> {
        try {
            const response = await apiClient.get<ApiResponse<UserResponse>>('/auth/me');
            const apiResponse = response.data;

            if (apiResponse.code !== 1000) {
                return {
                    success: false,
                    message: apiResponse.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
                };
            }

            return {
                success: true,
                data: apiResponse.result,
            };
        } catch (error) {
            if (axios.isAxiosError(error)) {
                const errorResponse = error.response?.data as ApiResponse<any>;
                // N·∫øu token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
                if (error.response?.status === 401) {
                    // X√≥a authData v√† y√™u c·∫ßu ƒëƒÉng nh·∫≠p l·∫°i
                    localStorage.removeItem('authData');
                    return {
                        success: false,
                        message: 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n',
                    };
                }
                return {
                    success: false,
                    message: errorResponse?.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
                };
            }
            return {
                success: false,
                message: 'L·ªói k·∫øt n·ªëi ƒë·∫øn server',
            };
        }
    }

    // Method refresh access token
    async refreshAccessToken(refreshToken: string): Promise<{ success: boolean; data?: AuthenticationResponse; message?: string }> {
        try {
            console.log('üîÑ Attempting to refresh access token...');
            const response = await axios.post<ApiResponse<AuthenticationResponse>>(
                `${import.meta.env.VITE_API_URL || 'http://localhost:8080/api/v1'}/auth/refresh`,
                { refreshToken },
                {
                    headers: {
                        'Content-Type': 'application/json',
                    }
                }
            );
            console.log('‚úÖ Token refresh successful');

            const apiResponse = response.data;
            if (apiResponse.code !== 1000) {
                return {
                    success: false,
                    message: apiResponse.message || 'Refresh token th·∫•t b·∫°i',
                };
            }

            return {
                success: true,
                data: apiResponse.result,
            };
        } catch (error) {
            if (axios.isAxiosError(error)) {
                const errorResponse = error.response?.data as ApiResponse<any>;
                return {
                    success: false,
                    message: errorResponse?.message || 'Refresh token th·∫•t b·∫°i',
                };
            }
            return {
                success: false,
                message: 'L·ªói k·∫øt n·ªëi ƒë·∫øn server',
            };
        }
    }

    // Method ƒë·ªïi m·∫≠t kh·∫©u
    async changePassword(passwordData: ChangePasswordRequest): Promise<{ success: boolean; message?: string }> {
        try {
            const response = await apiClient.post<ApiResponse<any>>(
                '/auth/change-password',
                {
                    currentPassword: passwordData.currentPassword,
                    newPassword: passwordData.newPassword
                }
            );

            const apiResponse = response.data;
            if (apiResponse.code !== 1000) {
                return {
                    success: false,
                    message: apiResponse.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i',
                };
            }

            return {
                success: true,
                message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
            };
        } catch (error) {
            if (axios.isAxiosError(error)) {
                const errorResponse = error.response?.data as ApiResponse<any>;
                return {
                    success: false,
                    message: errorResponse?.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i',
                };
            }
            return {
                success: false,
                message: 'L·ªói k·∫øt n·ªëi ƒë·∫øn server',
            };
        }
    }

    // Method ƒëƒÉng xu·∫•t
    async logout(): Promise<{ success: boolean; message?: string }> {
        try {
            // G·ªçi API logout ƒë·ªÉ invalidate token tr√™n server
            await apiClient.post('/auth/logout');

            return {
                success: true,
                message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
            };
        } catch (error) {
            // Ngay c·∫£ khi API logout l·ªói, ch√∫ng ta v·∫´n tr·∫£ success
            console.error('Logout API error:', error);
            return {
                success: true, // V·∫´n tr·∫£ success v√¨ s·∫Ω x√≥a local data ·ªü AuthContext
                message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
            };
        }
    }

    // L·∫•y th√¥ng tin auth hi·ªán t·∫°i t·ª´ localStorage
    getCurrentAuthData(): AuthenticationResponse | null {
        const authDataStr = localStorage.getItem('authData');
        return authDataStr ? JSON.parse(authDataStr) : null; // Parse JSON ho·∫∑c tr·∫£ null
    }

    // L·∫•y token hi·ªán t·∫°i
    getToken(): string | null {
        const authDataStr = localStorage.getItem('authData');
        if (authDataStr) {
            try {
                const authData = JSON.parse(authDataStr);
                return authData.accessToken || null;
            } catch (error) {
                console.error('Error parsing authData:', error);
                return null;
            }
        }
        return null;
    }

    // Ki·ªÉm tra xem user c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
    isAuthenticated(): boolean {
        const token = this.getToken();
        if (!token) return false;

        // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng (optional)
        try {
            // Parse JWT token ƒë·ªÉ l·∫•y expiry time
            const payload = JSON.parse(atob(token.split('.')[1]));
            const now = Date.now() / 1000;

            // N·∫øu token s·∫Øp h·∫øt h·∫°n trong 5 ph√∫t, coi nh∆∞ h·∫øt h·∫°n
            return payload.exp > (now + 300);
        } catch (error) {
            // N·∫øu kh√¥ng parse ƒë∆∞·ª£c token, coi nh∆∞ h·∫øt h·∫°n
            return false;
        }
    }

    // Ki·ªÉm tra token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
    isTokenExpiringSoon(): boolean {
        const token = this.getToken();
        if (!token) return true;

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const now = Date.now() / 1000;

            // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n trong 5 ph√∫t kh√¥ng
            return payload.exp <= (now + 300);
        } catch (error) {
            console.error('Error checking token expiry:', error);
            return true;
        }
    }

    // Refresh user data t·ª´ server
    async refreshUserData(): Promise<UserResponse | null> {
        const result = await this.getCurrentUser();
        if (result.success && result.data) {
            // C·∫≠p nh·∫≠t user data trong authData
            const authDataStr = localStorage.getItem('authData');
            if (authDataStr) {
                try {
                    const authData = JSON.parse(authDataStr);
                    authData.user = result.data;
                    localStorage.setItem('authData', JSON.stringify(authData));
                    return result.data;
                } catch (error) {
                    console.error('Error updating authData:', error);
                }
            }
        }
        return null;
    }



}

// Export instance ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c component kh√°c
export const authenticationService = new AuthenticationService();